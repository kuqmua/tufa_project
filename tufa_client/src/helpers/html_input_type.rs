#[derive(PartialEq)]
pub enum HtmlInputType {
    Button,
    Checkbox,
    Color,
    Date,
    Datetime,
    DatetimeLocal,
    Email,
    File,
    Hidden,
    Image,
    Month,
    Number,
    Password, //todo
    Radio,
    Range,
    Min,
    Max,
    Value,
    Step,
    Reset,
    Search,
    Submit,
    Tel,
    Text,
    Time,
    Url,
    Week,
}

impl HtmlInputType {
    pub fn get(&self) -> std::string::String {
        match self {
            HtmlInputType::Button => "button".to_string(),
            HtmlInputType::Checkbox => "checkbox".to_string(),
            HtmlInputType::Color => "color".to_string(),
            HtmlInputType::Date => "date".to_string(),
            HtmlInputType::Datetime => "datetime".to_string(),
            HtmlInputType::DatetimeLocal => "datetime-local".to_string(),
            HtmlInputType::Email => "email".to_string(),
            HtmlInputType::File => "file".to_string(),
            HtmlInputType::Hidden => "hidden".to_string(),
            HtmlInputType::Image => "image".to_string(),
            HtmlInputType::Month => "month".to_string(),
            HtmlInputType::Number => "number".to_string(),
            HtmlInputType::Password => "password".to_string(),
            HtmlInputType::Radio => "radio".to_string(),
            HtmlInputType::Range => "range".to_string(),
            HtmlInputType::Min => "min".to_string(),
            HtmlInputType::Max => "max".to_string(),
            HtmlInputType::Value => "value".to_string(),
            HtmlInputType::Step => "step".to_string(),
            HtmlInputType::Reset => "reset".to_string(),
            HtmlInputType::Search => "search".to_string(),
            HtmlInputType::Submit => "submit".to_string(),
            HtmlInputType::Tel => "tel".to_string(),
            HtmlInputType::Text => "text".to_string(),
            HtmlInputType::Time => "time".to_string(),
            HtmlInputType::Url => "url".to_string(),
            HtmlInputType::Week => "week".to_string(),
        }
    }
}
