[workspace]
resolver = "2"
members = [
  "integration_tests",
  "compile_time_git_info",
  "enum_extension",
  "error_occurence",
  "from_sqlx_postgres_error",
  "from_str",
  "generate_getter_traits_for_struct_fields",
  "init_from_env",
  "proc_macros/proc_macro_assistants",
  "proc_macros/proc_macro_common",
  "type_variants_from_reqwest_response",
  "svg_component",
  "proc_macros/user_port_try_from_u16",
  "error_occurence_lib",
  "tufa_common",
  "tufa_postgresql_crud",
  "tufa_server",
  "tufa_telegram_bot"
]
exclude = [
  "tufa_client",
  "tufa_grpc_client",
  "tufa_grpc_server",
]

[workspace.lints.rust]
unsafe_code = { level = "allow", priority = 0 }
absolute-paths-not-starting-with-crate = { level = "allow", priority = 0 } #fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name
box-pointers = { level = "allow", priority = 0 } #use of owned (Box type) heap memory
deprecated-in-future = { level = "allow", priority = 0 } #detects use of items that will be deprecated in a future version
elided-lifetimes-in-paths = { level = "allow", priority = 0 } #hidden lifetime parameters in types are deprecated
explicit-outlives-requirements = { level = "allow", priority = 0 } #outlives requirements can be inferred
ffi-unwind-calls = { level = "allow", priority = 0 } #call to foreign functions or function pointers with FFI-unwind ABI
# fuzzy-provenance-casts = { level = "allow", priority = 0 } #a fuzzy integer to pointer cast is used
keyword-idents = { level = "allow", priority = 0 } #detects edition keywords being used as an identifier
let-underscore-drop = { level = "allow", priority = 0 } #non-binding let on a type that implements `Drop`
# lossy-provenance-casts = { level = "allow", priority = 0 } #a lossy pointer to integer cast is used
macro-use-extern-crate = { level = "allow", priority = 0 } #the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system
meta-variable-misuse = { level = "allow", priority = 0 } #possible meta-variable misuse at macro definition
missing-abi = { level = "allow", priority = 0 } #No declared ABI for extern declaration
missing-copy-implementations = { level = "allow", priority = 0 } #detects potentially-forgotten implementations of `Copy`
missing-debug-implementations = { level = "allow", priority = 0 } #detects missing implementations of Debug
missing-docs = { level = "allow", priority = 0 } #detects missing documentation for public members
# multiple-supertrait-upcastable = { level = "allow", priority = 0 } #detect when an object-safe trait has multiple supertraits
# must-not-suspend = { level = "allow", priority = 0 } #use of a `#[must_not_suspend]` value across a yield point
non-ascii-idents = { level = "allow", priority = 0 } #detects non-ASCII identifiers
# non-exhaustive-omitted-patterns = { level = "allow", priority = 0 } #detect when patterns of types marked `non_exhaustive` are missed
rust-2021-incompatible-closure-captures = { level = "allow", priority = 0 } #detects closures affected by Rust 2021 changes
rust-2021-incompatible-or-patterns = { level = "allow", priority = 0 } #detects usage of old versions of or-patterns
rust-2021-prefixes-incompatible-syntax = { level = "allow", priority = 0 } #identifiers that will be parsed as a prefix in Rust 2021
rust-2021-prelude-collisions = { level = "allow", priority = 0 } #detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions
single-use-lifetimes = { level = "allow", priority = 0 } #detects lifetime parameters that are only used once
trivial-casts = { level = "allow", priority = 0 } #detects trivial casts which could be removed
trivial-numeric-casts = { level = "allow", priority = 0 } #detects trivial casts of numeric types which could be removed
# unnameable-types = { level = "allow", priority = 0 } #effective visibility of a type is larger than the area in which it can be named
unreachable-pub = { level = "allow", priority = 0 } #`pub` items not reachable from crate root
unsafe-code = { level = "allow", priority = 0 } #usage of `unsafe` code and other potentially unsound constructs
unsafe-op-in-unsafe-fn = { level = "allow", priority = 0 } #unsafe operations in unsafe functions without an explicit unsafe block are deprecated
unstable-features = { level = "allow", priority = 0 } #enabling unstable features (deprecated. do not use)
unused-crate-dependencies = { level = "allow", priority = 0 } #crate dependencies that are never used
unused-extern-crates = { level = "allow", priority = 0 } #extern crates that are never used
unused-import-braces = { level = "allow", priority = 0 } #unnecessary braces around an imported item
unused-lifetimes = { level = "allow", priority = 0 } #detects lifetime parameters that are never used
unused-macro-rules = { level = "allow", priority = 0 } #detects macro rules that were not used
unused-qualifications = { level = "allow", priority = 0 } #detects unnecessarily qualified names
unused-results = { level = "allow", priority = 0 } #unused result of an expression in a statement
unused-tuple-struct-fields = { level = "allow", priority = 0 } #detects tuple struct fields that are never read
variant-size-differences = { level = "warn", priority = 0 } #detects enums with widely varying variant sizes
ambiguous-glob-imports = { level = "warn", priority = 0 } #detects certain glob imports that require reporting an ambiguity error
ambiguous-glob-reexports = { level = "warn", priority = 0 } #ambiguous glob re-exports
anonymous-parameters = { level = "warn", priority = 0 } #detects anonymous parameters
array-into-iter = { level = "warn", priority = 0 } #detects calling `into_iter` on arrays in Rust 2015 and 2018
asm-sub-register = { level = "warn", priority = 0 } #using only a subset of a register for inline asm inputs
async-fn-in-trait = { level = "warn", priority = 0 } #use of `async fn` in definition of a publicly-reachable trait
bad-asm-style = { level = "warn", priority = 0 } #incorrect use of inline assembly
bare-trait-objects = { level = "warn", priority = 0 } #suggest using `dyn Trait` for trait objects
break-with-label-and-loop = { level = "warn", priority = 0 } #`break` expression with label and unlabeled loop as value expression
byte-slice-in-packed-struct-with-derive = { level = "warn", priority = 0 } #`[u8]` or `str` used in a packed struct with `derive`
clashing-extern-declarations = { level = "warn", priority = 0 } #detects when an extern fn has been declared with the same name but different types
coherence-leak-check = { level = "warn", priority = 0 } #distinct impls distinguished only by the leak-check code
confusable-idents = { level = "warn", priority = 0 } #detects visually confusable pairs between identifiers
const-evaluatable-unchecked = { level = "warn", priority = 0 } #detects a generic constant is used in a type without a emitting a warning
const-item-mutation = { level = "warn", priority = 0 } #detects attempts to mutate a `const` item
const-patterns-without-partial-eq = { level = "warn", priority = 0 } #constant in pattern does not implement `PartialEq`
dead-code = { level = "warn", priority = 0 } #detect unused, unexported items
deprecated = { level = "warn", priority = 0 } #detects use of deprecated items
deprecated-where-clause-location = { level = "warn", priority = 0 } #deprecated where clause location
deref-into-dyn-supertrait = { level = "warn", priority = 0 } #`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future
deref-nullptr = { level = "warn", priority = 0 } #detects when an null pointer is dereferenced
dropping-copy-types = { level = "warn", priority = 0 } #calls to `std::mem::drop` with a value that implements Copy
dropping-references = { level = "warn", priority = 0 } #calls to `std::mem::drop` with a reference instead of an owned value
drop-bounds = { level = "warn", priority = 0 } #bounds of the form `T: Drop` are most likely incorrect
duplicate-macro-attributes = { level = "warn", priority = 0 } #duplicated attribute
dyn-drop = { level = "warn", priority = 0 } #trait objects of the form `dyn Drop` are useless
elided-lifetimes-in-associated-constant = { level = "warn", priority = 0 } #elided lifetimes cannot be used in associated constants in impls
ellipsis-inclusive-range-patterns = { level = "warn", priority = 0 } #`...` range patterns are deprecated
exported-private-dependencies = { level = "warn", priority = 0 } #public interface leaks type from a private dependency
forbidden-lint-groups = { level = "warn", priority = 0 } #applying forbid to lint-groups
forgetting-copy-types = { level = "warn", priority = 0 } #calls to `std::mem::forget` with a value that implements Copy
forgetting-references = { level = "warn", priority = 0 } #calls to `std::mem::forget` with a reference instead of an owned value
for-loops-over-fallibles = { level = "warn", priority = 0 } #for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`
function-item-references = { level = "warn", priority = 0 } #suggest casting to a function pointer when attempting to take references to function items
hidden-glob-reexports = { level = "warn", priority = 0 } #name introduced by a private item shadows a name introduced by a public glob re-export
illegal-floating-point-literal-pattern = { level = "warn", priority = 0 } #floating-point literals cannot be used in patterns
improper-ctypes = { level = "warn", priority = 0 } #proper use of libc types in foreign modules
improper-ctypes-definitions = { level = "warn", priority = 0 } #proper use of libc types in foreign item definitions
incomplete-features = { level = "warn", priority = 0 } #incomplete features that may function improperly in some or all cases
indirect-structural-match = { level = "warn", priority = 0 } #constant used in pattern contains value of non-structural-match type in a field or a variant
inline-no-sanitize = { level = "warn", priority = 0 } #detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`
internal-features = { level = "warn", priority = 0 } #internal features are not supposed to be used
invalid-doc-attributes = { level = "warn", priority = 0 } #detects invalid `#[doc(...)]` attributes
invalid-from-utf8 = { level = "warn", priority = 0 } #using a non UTF-8 literal in `std::str::from_utf8`
invalid-macro-export-arguments = { level = "warn", priority = 0 } #"invalid_parameter" isn't a valid argument for `#[macro_export]`
invalid-nan-comparisons = { level = "warn", priority = 0 } #detects invalid floating point NaN comparisons
invalid-value = { level = "warn", priority = 0 } #an invalid value is being created (such as a null reference)
irrefutable-let-patterns = { level = "warn", priority = 0 } #detects irrefutable patterns in `if let` and `while let` statements
large-assignments = { level = "warn", priority = 0 } #detects large moves or copies
late-bound-lifetime-arguments = { level = "warn", priority = 0 } #detects generic lifetime arguments in path segments with late bound lifetime parameters
legacy-derive-helpers = { level = "warn", priority = 0 } #detects derive helper attributes that are used before they are introduced
map-unit-fn = { level = "warn", priority = 0 } #`Iterator::map` call that discard the iterator's values
mixed-script-confusables = { level = "warn", priority = 0 } #detects Unicode scripts whose mixed script confusables codepoints are solely used
named-arguments-used-positionally = { level = "warn", priority = 0 } #named arguments in format used positionally
nontrivial-structural-match = { level = "warn", priority = 0 } #constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types
non-camel-case-types = { level = "warn", priority = 0 } #types, variants, traits and type parameters should have camel case names
non-fmt-panics = { level = "warn", priority = 0 } #detect single-argument panic!() invocations in which the argument is not a format string
non-shorthand-field-patterns = { level = "warn", priority = 0 } #using `Struct { x: x }` instead of `Struct { x }` in a pattern
non-snake-case = { level = "warn", priority = 0 } #variables, methods, functions, lifetime parameters and modules should have snake case names
non-upper-case-globals = { level = "warn", priority = 0 } #static constants should have uppercase identifiers
noop-method-call = { level = "warn", priority = 0 } #detects the use of well-known noop methods
no-mangle-generic-items = { level = "warn", priority = 0 } #generic items must be mangled
opaque-hidden-inferred-bound = { level = "warn", priority = 0 } #detects the use of nested `impl Trait` types in associated type bounds that are not general enough
overlapping-range-endpoints = { level = "warn", priority = 0 } #detects range patterns with overlapping endpoints
path-statements = { level = "warn", priority = 0 } #path statements with no effect
pointer-structural-match = { level = "warn", priority = 0 } #pointers are not structural-match
private-bounds = { level = "warn", priority = 0 } #private type in secondary interface of an item
private-interfaces = { level = "warn", priority = 0 } #private type in primary interface of an item
redundant-semicolons = { level = "warn", priority = 0 } #detects unnecessary trailing semicolons
refining-impl-trait = { level = "warn", priority = 0 } #impl trait in impl method signature does not match trait method signature
renamed-and-removed-lints = { level = "warn", priority = 0 } #lints that have been renamed or removed
repr-transparent-external-private-fields = { level = "warn", priority = 0 } #transparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields
semicolon-in-expressions-from-macros = { level = "warn", priority = 0 } #trailing semicolon in macro body used as expression
special-module-name = { level = "warn", priority = 0 } #module declarations for files with a special meaning
stable-features = { level = "warn", priority = 0 } #stable features found in `#[feature]` directive
suspicious-auto-trait-impls = { level = "warn", priority = 0 } #the rules governing auto traits have recently changed resulting in potential breakage
suspicious-double-ref-op = { level = "warn", priority = 0 } #suspicious call of trait method on `&&T`
temporary-cstring-as-ptr = { level = "warn", priority = 0 } #detects getting the inner pointer of a temporary `CString`
trivial-bounds = { level = "warn", priority = 0 } #these bounds don't depend on an type parameters
type-alias-bounds = { level = "warn", priority = 0 } #bounds in type aliases are not enforced
tyvar-behind-raw-pointer = { level = "warn", priority = 0 } #raw pointer to an inference variable
uncommon-codepoints = { level = "warn", priority = 0 } #detects uncommon Unicode codepoints in identifiers
unconditional-recursion = { level = "warn", priority = 0 } #functions that cannot return without calling themselves
undefined-naked-function-abi = { level = "warn", priority = 0 } #undefined naked function ABI
unexpected-cfgs = { level = "warn", priority = 0 } #detects unexpected names and values in `#[cfg]` conditions
# unfulfilled-lint-expectations = { level = "warn", priority = 0 } #unfulfilled lint expectation
ungated-async-fn-track-caller = { level = "warn", priority = 0 } #enabling track_caller on an async fn is a no-op unless the async_fn_track_caller feature is enabled
uninhabited-static = { level = "warn", priority = 0 } #uninhabited static
unknown-lints = { level = "warn", priority = 0 } #unrecognized lint attribute
# unknown-or-malformed-diagnostic-attributes = { level = "warn", priority = 0 } #unrecognized or malformed diagnostic attribute
unnameable-test-items = { level = "warn", priority = 0 } #detects an item that cannot be named being marked as `#[test_case]`
unreachable-code = { level = "warn", priority = 0 } #detects unreachable code paths
unreachable-patterns = { level = "warn", priority = 0 } #detects unreachable patterns
unstable-name-collisions = { level = "warn", priority = 0 } #detects name collision with an existing but unstable method
unstable-syntax-pre-expansion = { level = "warn", priority = 0 } #unstable syntax can change at any point in the future, causing a hard error!
unsupported-calling-conventions = { level = "warn", priority = 0 } #use of unsupported calling convention
unused-allocation = { level = "warn", priority = 0 } #detects unnecessary allocations that can be eliminated
unused-assignments = { level = "warn", priority = 0 } #detect assignments that will never be read
unused-associated-type-bounds = { level = "warn", priority = 0 } #detects unused `Foo = Bar` bounds in `dyn Trait<Foo = Bar>`
unused-attributes = { level = "warn", priority = 0 } #detects attributes that were not used by the compiler
unused-braces = { level = "warn", priority = 0 } #unnecessary braces around an expression
unused-comparisons = { level = "warn", priority = 0 } #comparisons made useless by limits of the types involved
unused-doc-comments = { level = "warn", priority = 0 } #detects doc comments that aren't used by rustdoc
unused-features = { level = "warn", priority = 0 } #unused features found in crate-level `#[feature]` directives
unused-imports = { level = "warn", priority = 0 } #imports that are never used
unused-labels = { level = "warn", priority = 0 } #detects labels that are never used
unused-macros = { level = "warn", priority = 0 } #detects macros that were not used
unused-must-use = { level = "warn", priority = 0 } #unused result of a type flagged as `#[must_use]`
unused-mut = { level = "allow", priority = 0 } #detect mut variables which don't need to be mutable
unused-parens = { level = "warn", priority = 0 } #`if`, `match`, `while` and `return` do not need parentheses
unused-unsafe = { level = "warn", priority = 0 } #unnecessary use of an `unsafe` block
unused-variables = { level = "warn", priority = 0 } #detect variables which are not used in any way
useless-ptr-null-checks = { level = "warn", priority = 0 } #useless checking of non-null-typed pointer
warnings = { level = "warn", priority = 0 } #mass-change the level for lints which produce warnings
where-clauses-object-safety = { level = "warn", priority = 0 } #checks the object safety of where clauses
while-true = { level = "warn", priority = 0 } #suggest using `loop { }` instead of `while true { }`
ambiguous-associated-items = { level = "deny", priority = 0 } #ambiguous associated items
arithmetic-overflow = { level = "deny", priority = 0 } #arithmetic operation overflows
bindings-with-variant-name = { level = "deny", priority = 0 } #detects pattern bindings with the same name as one of the matched variants
cenum-impl-drop-cast = { level = "deny", priority = 0 } #a C-like enum implementing Drop is cast
coinductive-overlap-in-coherence = { level = "deny", priority = 0 } #impls that are not considered to overlap may be considered to overlap in the future
conflicting-repr-hints = { level = "deny", priority = 0 } #conflicts between `#[repr(..)]` hints that were previously accepted and used in practice
deprecated-cfg-attr-crate-type-name = { level = "deny", priority = 0 } #detects usage of `#![cfg_attr(..., crate_type/crate_name = "...")]`
enum-intrinsics-non-enums = { level = "deny", priority = 0 } #detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types
ill-formed-attribute-input = { level = "deny", priority = 0 } #ill-formed attribute inputs that were previously accepted and used in practice
implied-bounds-entailment = { level = "deny", priority = 0 } #impl method assumes more implied bounds than its corresponding trait method
incomplete-include = { level = "deny", priority = 0 } #trailing content in included file
ineffective-unstable-trait-impl = { level = "deny", priority = 0 } #detects `#[unstable]` on stable trait implementations for stable types
invalid-atomic-ordering = { level = "deny", priority = 0 } #usage of invalid atomic ordering in atomic operations and memory fences
invalid-from-utf8-unchecked = { level = "deny", priority = 0 } #using a non UTF-8 literal in `std::str::from_utf8_unchecked`
invalid-reference-casting = { level = "deny", priority = 0 } #casts of `&T` to `&mut T` without interior mutability
invalid-type-param-default = { level = "deny", priority = 0 } #type parameter default erroneously allowed in invalid location
let-underscore-lock = { level = "deny", priority = 0 } #non-binding let on a synchronization lock
long-running-const-eval = { level = "deny", priority = 0 } #detects long const eval operations
macro-expanded-macro-exports-accessed-by-absolute-paths = { level = "deny", priority = 0 } #macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths
missing-fragment-specifier = { level = "deny", priority = 0 } #detects missing fragment specifiers in unused `macro_rules!` patterns
mutable-transmutes = { level = "deny", priority = 0 } #transmuting &T to &mut T is undefined behavior, even if the reference is unused
named-asm-labels = { level = "deny", priority = 0 } #named labels in inline assembly
no-mangle-const-items = { level = "deny", priority = 0 } #const items will not have their symbols exported
order-dependent-trait-objects = { level = "deny", priority = 0 } #trait-object types were treated as different depending on marker-trait order
overflowing-literals = { level = "deny", priority = 0 } #literal out of range for its type
patterns-in-fns-without-body = { level = "deny", priority = 0 } #patterns in functions without body were erroneously allowed
proc-macro-back-compat = { level = "deny", priority = 0 } #detects usage of old versions of certain proc-macro crates
proc-macro-derive-resolution-fallback = { level = "deny", priority = 0 } #detects proc macro derives using inaccessible names from parent modules
pub-use-of-private-extern-crate = { level = "deny", priority = 0 } #detect public re-exports of private extern crates
soft-unstable = { level = "deny", priority = 0 } #a feature gate that doesn't break dependent crates
# test-unstable-lint = { level = "deny", priority = 0 } #this unstable lint is only for testing
text-direction-codepoint-in-comment = { level = "deny", priority = 0 } #invisible directionality-changing codepoints in comment
text-direction-codepoint-in-literal = { level = "deny", priority = 0 } #detect special Unicode codepoints that affect the visual representation of text on screen, changing the direction in which text flows
unconditional-panic = { level = "deny", priority = 0 } #operation will cause a panic at runtime
undropped-manually-drops = { level = "deny", priority = 0 } #calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of it's inner value
unknown-crate-types = { level = "deny", priority = 0 } #unknown crate type found in `#[crate_type]` directive
useless-deprecated = { level = "deny", priority = 0 } #detects deprecation attributes with no effect

[workspace.lints.clippy]#usage "cargo clippy"
absolute_paths = { level = "allow", priority = 0 }
absurd_extreme_comparisons = { level = "deny", priority = 0 }
alloc_instead_of_core = { level = "allow", priority = 0 }
allow_attributes = { level = "allow", priority = 0 }
allow_attributes_without_reason = { level = "allow", priority = 0 }
almost_complete_range = { level = "warn", priority = 0 }
almost_swapped = { level = "deny", priority = 0 }
approx_constant = { level = "deny", priority = 0 }
arc_with_non_send_sync = { level = "warn", priority = 0 }
arithmetic_side_effects = { level = "allow", priority = 0 }
as_conversions = { level = "allow", priority = 0 }
as_ptr_cast_mut = { level = "allow", priority = 0 }
as_underscore = { level = "allow", priority = 0 }
assertions_on_constants = { level = "warn", priority = 0 }
assertions_on_result_states = { level = "allow", priority = 0 }
assign_op_pattern = { level = "warn", priority = 0 }
async_yields_async = { level = "deny", priority = 0 }
await_holding_invalid_type = { level = "warn", priority = 0 }
await_holding_lock = { level = "warn", priority = 0 }
await_holding_refcell_ref = { level = "warn", priority = 0 }
bad_bit_mask = { level = "deny", priority = 0 }
big_endian_bytes = { level = "allow", priority = 0 }
bind_instead_of_map = { level = "warn", priority = 0 }
blanket_clippy_restriction_lints = { level = "warn", priority = 0 }
blocks_in_if_conditions = { level = "warn", priority = 0 }
bool_assert_comparison = { level = "warn", priority = 0 }
bool_comparison = { level = "warn", priority = 0 }
bool_to_int_with_if = { level = "allow", priority = 0 }
borrow_as_ptr = { level = "allow", priority = 0 }
borrow_deref_ref = { level = "warn", priority = 0 }
borrow_interior_mutable_const = { level = "warn", priority = 0 }
borrowed_box = { level = "warn", priority = 0 }
box_collection = { level = "warn", priority = 0 }
box_default = { level = "warn", priority = 0 }
boxed_local = { level = "warn", priority = 0 }
branches_sharing_code = { level = "allow", priority = 0 }
builtin_type_shadow = { level = "warn", priority = 0 }
bytes_count_to_len = { level = "warn", priority = 0 }
bytes_nth = { level = "warn", priority = 0 }
cargo_common_metadata = { level = "allow", priority = 0 }
case_sensitive_file_extension_comparisons = { level = "allow", priority = 0 }
cast_abs_to_unsigned = { level = "warn", priority = 0 }
cast_enum_constructor = { level = "warn", priority = 0 }
cast_enum_truncation = { level = "warn", priority = 0 }
cast_lossless = { level = "allow", priority = 0 }
cast_nan_to_int = { level = "warn", priority = 0 }
cast_possible_truncation = { level = "allow", priority = 0 }
cast_possible_wrap = { level = "allow", priority = 0 }
cast_precision_loss = { level = "allow", priority = 0 }
cast_ptr_alignment = { level = "allow", priority = 0 }
cast_sign_loss = { level = "allow", priority = 0 }
cast_slice_different_sizes = { level = "deny", priority = 0 }
cast_slice_from_raw_parts = { level = "warn", priority = 0 }
char_lit_as_u8 = { level = "warn", priority = 0 }
chars_last_cmp = { level = "warn", priority = 0 }
chars_next_cmp = { level = "warn", priority = 0 }
checked_conversions = { level = "allow", priority = 0 }
clear_with_drain = { level = "allow", priority = 0 }
clone_on_copy = { level = "warn", priority = 0 }
clone_on_ref_ptr = { level = "allow", priority = 0 }
cloned_instead_of_copied = { level = "allow", priority = 0 }
cmp_null = { level = "warn", priority = 0 }
cmp_owned = { level = "warn", priority = 0 }
cognitive_complexity = { level = "allow", priority = 0 }
collapsible_else_if = { level = "warn", priority = 0 }
collapsible_if = { level = "warn", priority = 0 }
collapsible_match = { level = "warn", priority = 0 }
collapsible_str_replace = { level = "warn", priority = 0 }
collection_is_never_read = { level = "allow", priority = 0 }
comparison_chain = { level = "warn", priority = 0 }
comparison_to_empty = { level = "warn", priority = 0 }
copy_iterator = { level = "allow", priority = 0 }
crate_in_macro_def = { level = "warn", priority = 0 }
create_dir = { level = "allow", priority = 0 }
crosspointer_transmute = { level = "warn", priority = 0 }
dbg_macro = { level = "allow", priority = 0 }
debug_assert_with_mut_call = { level = "allow", priority = 0 }
decimal_literal_representation = { level = "allow", priority = 0 }
declare_interior_mutable_const = { level = "warn", priority = 0 }
default_constructed_unit_structs = { level = "warn", priority = 0 }
default_instead_of_iter_empty = { level = "warn", priority = 0 }
default_numeric_fallback = { level = "allow", priority = 0 }
default_trait_access = { level = "allow", priority = 0 }
default_union_representation = { level = "allow", priority = 0 }
deprecated_cfg_attr = { level = "warn", priority = 0 }
deprecated_semver = { level = "deny", priority = 0 }
deref_addrof = { level = "warn", priority = 0 }
deref_by_slicing = { level = "allow", priority = 0 }
derivable_impls = { level = "warn", priority = 0 }
derive_ord_xor_partial_ord = { level = "deny", priority = 0 }
derive_partial_eq_without_eq = { level = "allow", priority = 0 }
derived_hash_with_manual_eq = { level = "deny", priority = 0 }
disallowed_macros = { level = "warn", priority = 0 }
disallowed_methods = { level = "warn", priority = 0 }
disallowed_names = { level = "warn", priority = 0 }
disallowed_script_idents = { level = "allow", priority = 0 }
disallowed_types = { level = "warn", priority = 0 }
diverging_sub_expression = { level = "warn", priority = 0 }
doc_link_with_quotes = { level = "allow", priority = 0 }
doc_markdown = { level = "allow", priority = 0 }
double_comparisons = { level = "warn", priority = 0 }
double_must_use = { level = "warn", priority = 0 }
double_neg = { level = "warn", priority = 0 }
double_parens = { level = "warn", priority = 0 }
drain_collect = { level = "warn", priority = 0 }
drop_non_drop = { level = "warn", priority = 0 }
duplicate_mod = { level = "warn", priority = 0 }
duplicate_underscore_argument = { level = "warn", priority = 0 }
duration_subsec = { level = "warn", priority = 0 }
else_if_without_else = { level = "allow", priority = 0 }
empty_drop = { level = "allow", priority = 0 }
empty_enum = { level = "allow", priority = 0 }
empty_line_after_doc_comments = { level = "allow", priority = 0 }
empty_line_after_outer_attr = { level = "allow", priority = 0 }
empty_loop = { level = "warn", priority = 0 }
empty_structs_with_brackets = { level = "allow", priority = 0 }
enum_clike_unportable_variant = { level = "deny", priority = 0 }
enum_glob_use = { level = "allow", priority = 0 }
enum_variant_names = { level = "warn", priority = 0 }
eq_op = { level = "deny", priority = 0 }
equatable_if_let = { level = "allow", priority = 0 }
erasing_op = { level = "deny", priority = 0 }
err_expect = { level = "warn", priority = 0 }
error_impl_error = { level = "allow", priority = 0 }
excessive_nesting = { level = "warn", priority = 0 }
excessive_precision = { level = "warn", priority = 0 }
exhaustive_enums = { level = "allow", priority = 0 }
exhaustive_structs = { level = "allow", priority = 0 }
exit = { level = "allow", priority = 0 }
expect_fun_call = { level = "warn", priority = 0 }
expect_used = { level = "allow", priority = 0 }
expl_impl_clone_on_copy = { level = "allow", priority = 0 }
explicit_auto_deref = { level = "warn", priority = 0 }
explicit_counter_loop = { level = "warn", priority = 0 }
explicit_deref_methods = { level = "allow", priority = 0 }
explicit_into_iter_loop = { level = "allow", priority = 0 }
explicit_iter_loop = { level = "allow", priority = 0 }
explicit_write = { level = "warn", priority = 0 }
extend_with_drain = { level = "warn", priority = 0 }
extra_unused_lifetimes = { level = "warn", priority = 0 }
extra_unused_type_parameters = { level = "warn", priority = 0 }
fallible_impl_from = { level = "allow", priority = 0 }
field_reassign_with_default = { level = "warn", priority = 0 }
filetype_is_file = { level = "allow", priority = 0 }
filter_map_bool_then = { level = "warn", priority = 0 }
filter_map_identity = { level = "warn", priority = 0 }
filter_map_next = { level = "allow", priority = 0 }
filter_next = { level = "warn", priority = 0 }
flat_map_identity = { level = "warn", priority = 0 }
flat_map_option = { level = "allow", priority = 0 }
float_arithmetic = { level = "allow", priority = 0 }
float_cmp = { level = "allow", priority = 0 }
float_cmp_const = { level = "allow", priority = 0 }
float_equality_without_abs = { level = "warn", priority = 0 }
fn_address_comparisons = { level = "deny", priority = 0 }
fn_params_excessive_bools = { level = "allow", priority = 0 }
fn_to_numeric_cast = { level = "warn", priority = 0 }
fn_to_numeric_cast_any = { level = "allow", priority = 0 }
fn_to_numeric_cast_with_truncation = { level = "warn", priority = 0 }
for_kv_map = { level = "warn", priority = 0 }
forget_non_drop = { level = "warn", priority = 0 }
format_collect = { level = "warn", priority = 0 }
format_in_format_args = { level = "warn", priority = 0 }
format_push_string = { level = "allow", priority = 0 }
four_forward_slashes = { level = "warn", priority = 0 }
from_iter_instead_of_collect = { level = "allow", priority = 0 }
from_over_into = { level = "warn", priority = 0 }
from_raw_with_void_ptr = { level = "warn", priority = 0 }
from_str_radix_10 = { level = "warn", priority = 0 }
future_not_send = { level = "allow", priority = 0 }
get_first = { level = "warn", priority = 0 }
get_last_with_len = { level = "warn", priority = 0 }
get_unwrap = { level = "allow", priority = 0 }
host_endian_bytes = { level = "allow", priority = 0 }
identity_op = { level = "warn", priority = 0 }
if_let_mutex = { level = "deny", priority = 0 }
if_not_else = { level = "allow", priority = 0 }
if_same_then_else = { level = "warn", priority = 0 }
if_then_some_else_none = { level = "allow", priority = 0 }
ifs_same_cond = { level = "deny", priority = 0 }
ignored_unit_patterns = { level = "allow", priority = 0 }
impl_hash_borrow_with_str_and_bytes = { level = "deny", priority = 0 }
impl_trait_in_params = { level = "allow", priority = 0 }
implicit_clone = { level = "allow", priority = 0 }
implicit_hasher = { level = "allow", priority = 0 }
implicit_return = { level = "allow", priority = 0 }
implicit_saturating_add = { level = "warn", priority = 0 }
implicit_saturating_sub = { level = "warn", priority = 0 }
implied_bounds_in_impls = { level = "allow", priority = 0 }
impossible_comparisons = { level = "deny", priority = 0 }
imprecise_flops = { level = "allow", priority = 0 }
inconsistent_digit_grouping = { level = "warn", priority = 0 }
inconsistent_struct_constructor = { level = "allow", priority = 0 }
index_refutable_slice = { level = "allow", priority = 0 }
indexing_slicing = { level = "allow", priority = 0 }
ineffective_bit_mask = { level = "deny", priority = 0 }
inefficient_to_string = { level = "allow", priority = 0 }
infallible_destructuring_match = { level = "warn", priority = 0 }
infinite_iter = { level = "deny", priority = 0 }
inherent_to_string = { level = "warn", priority = 0 }
inherent_to_string_shadow_display = { level = "deny", priority = 0 }
init_numbered_fields = { level = "warn", priority = 0 }
inline_always = { level = "allow", priority = 0 }
inline_asm_x86_att_syntax = { level = "allow", priority = 0 }
inline_asm_x86_intel_syntax = { level = "allow", priority = 0 }
inline_fn_without_body = { level = "deny", priority = 0 }
inspect_for_each = { level = "warn", priority = 0 }
int_plus_one = { level = "warn", priority = 0 }
integer_division = { level = "allow", priority = 0 }
into_iter_on_ref = { level = "warn", priority = 0 }
into_iter_without_iter = { level = "allow", priority = 0 }
invalid_null_ptr_usage = { level = "deny", priority = 0 }
invalid_regex = { level = "deny", priority = 0 }
invalid_upcast_comparisons = { level = "allow", priority = 0 }
invisible_characters = { level = "deny", priority = 0 }
is_digit_ascii_radix = { level = "warn", priority = 0 }
items_after_statements = { level = "allow", priority = 0 }
items_after_test_module = { level = "warn", priority = 0 }
iter_cloned_collect = { level = "warn", priority = 0 }
iter_count = { level = "warn", priority = 0 }
iter_kv_map = { level = "warn", priority = 0 }
iter_next_loop = { level = "deny", priority = 0 }
iter_next_slice = { level = "warn", priority = 0 }
iter_not_returning_iterator = { level = "allow", priority = 0 }
iter_nth = { level = "warn", priority = 0 }
iter_nth_zero = { level = "warn", priority = 0 }
iter_on_empty_collections = { level = "allow", priority = 0 }
iter_on_single_items = { level = "allow", priority = 0 }
iter_out_of_bounds = { level = "warn", priority = 0 }
iter_over_hash_type = { level = "allow", priority = 0 }
iter_overeager_cloned = { level = "warn", priority = 0 }
iter_skip_next = { level = "warn", priority = 0 }
iter_skip_zero = { level = "deny", priority = 0 }
iter_with_drain = { level = "allow", priority = 0 }
iter_without_into_iter = { level = "allow", priority = 0 }
iterator_step_by_zero = { level = "deny", priority = 0 }
join_absolute_paths = { level = "warn", priority = 0 }
just_underscores_and_digits = { level = "warn", priority = 0 }
large_const_arrays = { level = "warn", priority = 0 }
large_digit_groups = { level = "allow", priority = 0 }
large_enum_variant = { level = "warn", priority = 0 }
large_futures = { level = "allow", priority = 0 }
large_include_file = { level = "allow", priority = 0 }
large_stack_arrays = { level = "allow", priority = 0 }
large_stack_frames = { level = "allow", priority = 0 }
large_types_passed_by_value = { level = "allow", priority = 0 }
len_without_is_empty = { level = "warn", priority = 0 }
len_zero = { level = "warn", priority = 0 }
let_and_return = { level = "warn", priority = 0 }
let_underscore_future = { level = "warn", priority = 0 }
let_underscore_lock = { level = "deny", priority = 0 }
let_underscore_must_use = { level = "allow", priority = 0 }
let_underscore_untyped = { level = "allow", priority = 0 }
let_unit_value = { level = "warn", priority = 0 }
let_with_type_underscore = { level = "warn", priority = 0 }
lines_filter_map_ok = { level = "warn", priority = 0 }
linkedlist = { level = "allow", priority = 0 }
little_endian_bytes = { level = "allow", priority = 0 }
lossy_float_literal = { level = "allow", priority = 0 }
macro_use_imports = { level = "allow", priority = 0 }
main_recursion = { level = "warn", priority = 0 }
manual_assert = { level = "allow", priority = 0 }
manual_async_fn = { level = "warn", priority = 0 }
manual_bits = { level = "warn", priority = 0 }
manual_clamp = { level = "allow", priority = 0 }
manual_filter = { level = "warn", priority = 0 }
manual_filter_map = { level = "warn", priority = 0 }
manual_find = { level = "warn", priority = 0 }
manual_find_map = { level = "warn", priority = 0 }
manual_flatten = { level = "warn", priority = 0 }
manual_hash_one = { level = "warn", priority = 0 }
manual_instant_elapsed = { level = "allow", priority = 0 }
manual_is_ascii_check = { level = "warn", priority = 0 }
manual_is_finite = { level = "warn", priority = 0 }
manual_is_infinite = { level = "warn", priority = 0 }
manual_let_else = { level = "allow", priority = 0 }
manual_main_separator_str = { level = "warn", priority = 0 }
manual_map = { level = "warn", priority = 0 }
manual_memcpy = { level = "warn", priority = 0 }
manual_next_back = { level = "warn", priority = 0 }
manual_non_exhaustive = { level = "warn", priority = 0 }
manual_ok_or = { level = "allow", priority = 0 }
manual_range_contains = { level = "warn", priority = 0 }
manual_range_patterns = { level = "warn", priority = 0 }
manual_rem_euclid = { level = "warn", priority = 0 }
manual_retain = { level = "warn", priority = 0 }
manual_saturating_arithmetic = { level = "warn", priority = 0 }
manual_slice_size_calculation = { level = "warn", priority = 0 }
manual_split_once = { level = "warn", priority = 0 }
manual_str_repeat = { level = "warn", priority = 0 }
manual_string_new = { level = "allow", priority = 0 }
manual_strip = { level = "warn", priority = 0 }
manual_swap = { level = "warn", priority = 0 }
manual_try_fold = { level = "warn", priority = 0 }
manual_unwrap_or = { level = "warn", priority = 0 }
manual_while_let_some = { level = "warn", priority = 0 }
many_single_char_names = { level = "allow", priority = 0 }
map_clone = { level = "warn", priority = 0 }
map_collect_result_unit = { level = "warn", priority = 0 }
map_entry = { level = "warn", priority = 0 }
map_err_ignore = { level = "allow", priority = 0 }
map_flatten = { level = "warn", priority = 0 }
map_identity = { level = "warn", priority = 0 }
map_unwrap_or = { level = "allow", priority = 0 }
match_as_ref = { level = "warn", priority = 0 }
match_bool = { level = "allow", priority = 0 }
match_like_matches_macro = { level = "warn", priority = 0 }
match_on_vec_items = { level = "allow", priority = 0 }
match_overlapping_arm = { level = "warn", priority = 0 }
match_ref_pats = { level = "warn", priority = 0 }
match_result_ok = { level = "warn", priority = 0 }
match_same_arms = { level = "allow", priority = 0 }
match_single_binding = { level = "warn", priority = 0 }
match_str_case_mismatch = { level = "deny", priority = 0 }
match_wild_err_arm = { level = "allow", priority = 0 }
match_wildcard_for_single_variants = { level = "allow", priority = 0 }
maybe_infinite_iter = { level = "allow", priority = 0 }
maybe_misused_cfg = { level = "warn", priority = 0 }
mem_forget = { level = "allow", priority = 0 }
mem_replace_option_with_none = { level = "warn", priority = 0 }
mem_replace_with_default = { level = "warn", priority = 0 }
mem_replace_with_uninit = { level = "deny", priority = 0 }
min_ident_chars = { level = "allow", priority = 0 }
min_max = { level = "deny", priority = 0 }
mismatched_target_os = { level = "deny", priority = 0 }
mismatching_type_param_order = { level = "allow", priority = 0 }
misnamed_getters = { level = "warn", priority = 0 }
misrefactored_assign_op = { level = "warn", priority = 0 }
missing_assert_message = { level = "allow", priority = 0 }
missing_asserts_for_indexing = { level = "allow", priority = 0 }
missing_const_for_fn = { level = "allow", priority = 0 }
missing_docs_in_private_items = { level = "allow", priority = 0 }
missing_enforced_import_renames = { level = "warn", priority = 0 }
missing_errors_doc = { level = "allow", priority = 0 }
missing_fields_in_debug = { level = "allow", priority = 0 }
missing_inline_in_public_items = { level = "allow", priority = 0 }
missing_panics_doc = { level = "allow", priority = 0 }
missing_safety_doc = { level = "warn", priority = 0 }
missing_spin_loop = { level = "warn", priority = 0 }
missing_trait_methods = { level = "allow", priority = 0 }
mistyped_literal_suffixes = { level = "deny", priority = 0 }
mixed_case_hex_literals = { level = "warn", priority = 0 }
mixed_read_write_in_expression = { level = "allow", priority = 0 }
mod_module_files = { level = "allow", priority = 0 }
module_inception = { level = "warn", priority = 0 }
module_name_repetitions = { level = "allow", priority = 0 }
modulo_arithmetic = { level = "allow", priority = 0 }
modulo_one = { level = "deny", priority = 0 }
multi_assignments = { level = "warn", priority = 0 }
multiple_crate_versions = { level = "allow", priority = 0 }
multiple_inherent_impl = { level = "allow", priority = 0 }
multiple_unsafe_ops_per_block = { level = "allow", priority = 0 }
must_use_candidate = { level = "allow", priority = 0 }
must_use_unit = { level = "warn", priority = 0 }
mut_from_ref = { level = "deny", priority = 0 }
mut_mut = { level = "allow", priority = 0 }
mut_mutex_lock = { level = "warn", priority = 0 }
mut_range_bound = { level = "warn", priority = 0 }
mutable_key_type = { level = "warn", priority = 0 }
mutex_atomic = { level = "allow", priority = 0 }
mutex_integer = { level = "allow", priority = 0 }
naive_bytecount = { level = "allow", priority = 0 }
needless_arbitrary_self_type = { level = "warn", priority = 0 }
needless_bitwise_bool = { level = "allow", priority = 0 }
needless_bool = { level = "warn", priority = 0 }
needless_bool_assign = { level = "warn", priority = 0 }
needless_borrow = { level = "warn", priority = 0 }
needless_borrowed_reference = { level = "warn", priority = 0 }
needless_borrows_for_generic_args = { level = "warn", priority = 0 }
needless_collect = { level = "allow", priority = 0 }
needless_continue = { level = "allow", priority = 0 }
needless_doctest_main = { level = "warn", priority = 0 }
needless_else = { level = "warn", priority = 0 }
needless_for_each = { level = "allow", priority = 0 }
needless_if = { level = "warn", priority = 0 }
needless_late_init = { level = "warn", priority = 0 }
needless_lifetimes = { level = "warn", priority = 0 }
needless_match = { level = "warn", priority = 0 }
needless_option_as_deref = { level = "warn", priority = 0 }
needless_option_take = { level = "warn", priority = 0 }
needless_parens_on_range_literals = { level = "warn", priority = 0 }
needless_pass_by_ref_mut = { level = "allow", priority = 0 }
needless_pass_by_value = { level = "allow", priority = 0 }
needless_pub_self = { level = "warn", priority = 0 }
needless_question_mark = { level = "warn", priority = 0 }
needless_range_loop = { level = "warn", priority = 0 }
needless_raw_string_hashes = { level = "allow", priority = 0 }
needless_raw_strings = { level = "allow", priority = 0 }
needless_return = { level = "warn", priority = 0 }
needless_return_with_question_mark = { level = "warn", priority = 0 }
needless_splitn = { level = "warn", priority = 0 }
needless_update = { level = "warn", priority = 0 }
neg_cmp_op_on_partial_ord = { level = "warn", priority = 0 }
neg_multiply = { level = "warn", priority = 0 }
negative_feature_names = { level = "allow", priority = 0 }
never_loop = { level = "deny", priority = 0 }
new_ret_no_self = { level = "warn", priority = 0 }
new_without_default = { level = "warn", priority = 0 }
no_effect = { level = "warn", priority = 0 }
no_effect_replace = { level = "warn", priority = 0 }
no_effect_underscore_binding = { level = "allow", priority = 0 }
no_mangle_with_rust_abi = { level = "allow", priority = 0 }
non_ascii_literal = { level = "allow", priority = 0 }
non_canonical_clone_impl = { level = "warn", priority = 0 }
non_canonical_partial_ord_impl = { level = "warn", priority = 0 }
non_minimal_cfg = { level = "warn", priority = 0 }
non_octal_unix_permissions = { level = "deny", priority = 0 }
non_send_fields_in_send_ty = { level = "allow", priority = 0 }
nonminimal_bool = { level = "warn", priority = 0 }
nonsensical_open_options = { level = "deny", priority = 0 }
nonstandard_macro_braces = { level = "allow", priority = 0 }
not_unsafe_ptr_arg_deref = { level = "deny", priority = 0 }
obfuscated_if_else = { level = "warn", priority = 0 }
octal_escapes = { level = "warn", priority = 0 }
ok_expect = { level = "warn", priority = 0 }
only_used_in_recursion = { level = "warn", priority = 0 }
op_ref = { level = "warn", priority = 0 }
option_as_ref_deref = { level = "warn", priority = 0 }
option_env_unwrap = { level = "deny", priority = 0 }
option_filter_map = { level = "warn", priority = 0 }
option_if_let_else = { level = "allow", priority = 0 }
option_map_or_none = { level = "warn", priority = 0 }
option_map_unit_fn = { level = "warn", priority = 0 }
option_option = { level = "allow", priority = 0 }
or_fun_call = { level = "allow", priority = 0 }
or_then_unwrap = { level = "warn", priority = 0 }
out_of_bounds_indexing = { level = "deny", priority = 0 }
overflow_check_conditional = { level = "warn", priority = 0 }
overly_complex_bool_expr = { level = "deny", priority = 0 }
panic = { level = "allow", priority = 0 }
panic_in_result_fn = { level = "allow", priority = 0 }
panicking_unwrap = { level = "deny", priority = 0 }
partial_pub_fields = { level = "allow", priority = 0 }
partialeq_ne_impl = { level = "warn", priority = 0 }
partialeq_to_none = { level = "warn", priority = 0 }
path_buf_push_overwrite = { level = "allow", priority = 0 }
path_ends_with_ext = { level = "warn", priority = 0 }
pattern_type_mismatch = { level = "allow", priority = 0 }
permissions_set_readonly_false = { level = "warn", priority = 0 }
possible_missing_comma = { level = "deny", priority = 0 }
precedence = { level = "warn", priority = 0 }
print_in_format_impl = { level = "warn", priority = 0 }
print_literal = { level = "warn", priority = 0 }
print_stderr = { level = "allow", priority = 0 }
print_stdout = { level = "allow", priority = 0 }
print_with_newline = { level = "warn", priority = 0 }
println_empty_string = { level = "warn", priority = 0 }
ptr_arg = { level = "warn", priority = 0 }
ptr_as_ptr = { level = "allow", priority = 0 }
ptr_cast_constness = { level = "allow", priority = 0 }
ptr_eq = { level = "warn", priority = 0 }
ptr_offset_with_cast = { level = "warn", priority = 0 }
pub_use = { level = "allow", priority = 0 }
pub_with_shorthand = { level = "allow", priority = 0 }
pub_without_shorthand = { level = "allow", priority = 0 }
question_mark = { level = "warn", priority = 0 }
question_mark_used = { level = "allow", priority = 0 }
range_minus_one = { level = "allow", priority = 0 }
range_plus_one = { level = "allow", priority = 0 }
range_zip_with_len = { level = "warn", priority = 0 }
rc_buffer = { level = "allow", priority = 0 }
rc_clone_in_vec_init = { level = "warn", priority = 0 }
rc_mutex = { level = "allow", priority = 0 }
read_line_without_trim = { level = "deny", priority = 0 }
read_zero_byte_vec = { level = "allow", priority = 0 }
readonly_write_lock = { level = "allow", priority = 0 }
recursive_format_impl = { level = "deny", priority = 0 }
redundant_allocation = { level = "warn", priority = 0 }
redundant_as_str = { level = "warn", priority = 0 }
redundant_async_block = { level = "warn", priority = 0 }
redundant_at_rest_pattern = { level = "warn", priority = 0 }
redundant_clone = { level = "allow", priority = 0 }
redundant_closure = { level = "warn", priority = 0 }
redundant_closure_call = { level = "warn", priority = 0 }
redundant_closure_for_method_calls = { level = "allow", priority = 0 }
redundant_comparisons = { level = "deny", priority = 0 }
redundant_else = { level = "allow", priority = 0 }
redundant_feature_names = { level = "allow", priority = 0 }
redundant_field_names = { level = "warn", priority = 0 }
redundant_guards = { level = "warn", priority = 0 }
redundant_locals = { level = "deny", priority = 0 }
redundant_pattern = { level = "warn", priority = 0 }
redundant_pattern_matching = { level = "warn", priority = 0 }
redundant_pub_crate = { level = "allow", priority = 0 }
redundant_slicing = { level = "warn", priority = 0 }
redundant_static_lifetimes = { level = "warn", priority = 0 }
redundant_type_annotations = { level = "allow", priority = 0 }
ref_binding_to_reference = { level = "allow", priority = 0 }
ref_option_ref = { level = "allow", priority = 0 }
ref_patterns = { level = "allow", priority = 0 }
repeat_once = { level = "warn", priority = 0 }
reserve_after_initialization = { level = "warn", priority = 0 }
rest_pat_in_fully_bound_structs = { level = "allow", priority = 0 }
result_large_err = { level = "warn", priority = 0 }
result_map_or_into_option = { level = "warn", priority = 0 }
result_map_unit_fn = { level = "warn", priority = 0 }
result_unit_err = { level = "warn", priority = 0 }
return_self_not_must_use = { level = "allow", priority = 0 }
reversed_empty_ranges = { level = "deny", priority = 0 }
same_functions_in_if_condition = { level = "allow", priority = 0 }
same_item_push = { level = "warn", priority = 0 }
same_name_method = { level = "allow", priority = 0 }
search_is_some = { level = "warn", priority = 0 }
seek_from_current = { level = "warn", priority = 0 }
seek_to_start_instead_of_rewind = { level = "warn", priority = 0 }
self_assignment = { level = "deny", priority = 0 }
self_named_constructors = { level = "warn", priority = 0 }
self_named_module_files = { level = "allow", priority = 0 }
semicolon_if_nothing_returned = { level = "allow", priority = 0 }
semicolon_inside_block = { level = "allow", priority = 0 }
semicolon_outside_block = { level = "allow", priority = 0 }
separated_literal_suffix = { level = "allow", priority = 0 }
serde_api_misuse = { level = "deny", priority = 0 }
shadow_reuse = { level = "allow", priority = 0 }
shadow_same = { level = "allow", priority = 0 }
shadow_unrelated = { level = "allow", priority = 0 }
short_circuit_statement = { level = "warn", priority = 0 }
should_implement_trait = { level = "warn", priority = 0 }
should_panic_without_expect = { level = "allow", priority = 0 }
significant_drop_in_scrutinee = { level = "allow", priority = 0 }
significant_drop_tightening = { level = "allow", priority = 0 }
similar_names = { level = "allow", priority = 0 }
single_call_fn = { level = "allow", priority = 0 }
single_char_add_str = { level = "warn", priority = 0 }
single_char_lifetime_names = { level = "allow", priority = 0 }
single_char_pattern = { level = "warn", priority = 0 }
single_component_path_imports = { level = "warn", priority = 0 }
single_element_loop = { level = "warn", priority = 0 }
single_match = { level = "warn", priority = 0 }
single_match_else = { level = "allow", priority = 0 }
single_range_in_vec_init = { level = "warn", priority = 0 }
size_of_in_element_count = { level = "deny", priority = 0 }
size_of_ref = { level = "warn", priority = 0 }
skip_while_next = { level = "warn", priority = 0 }
slow_vector_initialization = { level = "warn", priority = 0 }
stable_sort_primitive = { level = "allow", priority = 0 }
std_instead_of_alloc = { level = "allow", priority = 0 }
std_instead_of_core = { level = "allow", priority = 0 }
str_to_string = { level = "allow", priority = 0 }
string_add = { level = "allow", priority = 0 }
string_add_assign = { level = "allow", priority = 0 }
string_extend_chars = { level = "warn", priority = 0 }
string_from_utf8_as_bytes = { level = "warn", priority = 0 }
string_lit_as_bytes = { level = "allow", priority = 0 }
string_lit_chars_any = { level = "allow", priority = 0 }
string_slice = { level = "allow", priority = 0 }
string_to_string = { level = "allow", priority = 0 }
strlen_on_c_strings = { level = "warn", priority = 0 }
struct_excessive_bools = { level = "allow", priority = 0 }
struct_field_names = { level = "allow", priority = 0 }
suboptimal_flops = { level = "allow", priority = 0 }
suspicious_arithmetic_impl = { level = "warn", priority = 0 }
suspicious_assignment_formatting = { level = "warn", priority = 0 }
suspicious_command_arg_space = { level = "warn", priority = 0 }
suspicious_doc_comments = { level = "warn", priority = 0 }
suspicious_else_formatting = { level = "warn", priority = 0 }
suspicious_map = { level = "warn", priority = 0 }
suspicious_op_assign_impl = { level = "warn", priority = 0 }
suspicious_operation_groupings = { level = "allow", priority = 0 }
suspicious_splitn = { level = "deny", priority = 0 }
suspicious_to_owned = { level = "warn", priority = 0 }
suspicious_unary_op_formatting = { level = "warn", priority = 0 }
suspicious_xor_used_as_pow = { level = "allow", priority = 0 }
swap_ptr_to_ref = { level = "warn", priority = 0 }
tabs_in_doc_comments = { level = "warn", priority = 0 }
temporary_assignment = { level = "warn", priority = 0 }
tests_outside_test_module = { level = "allow", priority = 0 }
to_digit_is_some = { level = "warn", priority = 0 }
to_string_in_format_args = { level = "warn", priority = 0 }
todo = { level = "allow", priority = 0 }
too_many_arguments = { level = "warn", priority = 0 }
too_many_lines = { level = "allow", priority = 0 }
toplevel_ref_arg = { level = "warn", priority = 0 }
trailing_empty_array = { level = "allow", priority = 0 }
trait_duplication_in_bounds = { level = "allow", priority = 0 }
transmute_bytes_to_str = { level = "warn", priority = 0 }
transmute_float_to_int = { level = "warn", priority = 0 }
transmute_int_to_bool = { level = "warn", priority = 0 }
transmute_int_to_char = { level = "warn", priority = 0 }
transmute_int_to_float = { level = "warn", priority = 0 }
transmute_int_to_non_zero = { level = "warn", priority = 0 }
transmute_null_to_fn = { level = "deny", priority = 0 }
transmute_num_to_bytes = { level = "warn", priority = 0 }
transmute_ptr_to_ptr = { level = "allow", priority = 0 }
transmute_ptr_to_ref = { level = "warn", priority = 0 }
transmute_undefined_repr = { level = "allow", priority = 0 }
transmutes_expressible_as_ptr_casts = { level = "warn", priority = 0 }
transmuting_null = { level = "deny", priority = 0 }
trim_split_whitespace = { level = "warn", priority = 0 }
trivial_regex = { level = "allow", priority = 0 }
trivially_copy_pass_by_ref = { level = "allow", priority = 0 }
try_err = { level = "allow", priority = 0 }
tuple_array_conversions = { level = "allow", priority = 0 }
type_complexity = { level = "warn", priority = 0 }
type_id_on_box = { level = "warn", priority = 0 }
type_repetition_in_bounds = { level = "allow", priority = 0 }
unchecked_duration_subtraction = { level = "allow", priority = 0 }
undocumented_unsafe_blocks = { level = "allow", priority = 0 }
unicode_not_nfc = { level = "allow", priority = 0 }
unimplemented = { level = "allow", priority = 0 }
uninit_assumed_init = { level = "deny", priority = 0 }
uninit_vec = { level = "deny", priority = 0 }
uninlined_format_args = { level = "allow", priority = 0 }
unit_arg = { level = "warn", priority = 0 }
unit_cmp = { level = "deny", priority = 0 }
unit_hash = { level = "deny", priority = 0 }
unit_return_expecting_ord = { level = "deny", priority = 0 }
unnecessary_box_returns = { level = "allow", priority = 0 }
unnecessary_cast = { level = "warn", priority = 0 }
unnecessary_fallible_conversions = { level = "warn", priority = 0 }
unnecessary_filter_map = { level = "warn", priority = 0 }
unnecessary_find_map = { level = "warn", priority = 0 }
unnecessary_fold = { level = "warn", priority = 0 }
unnecessary_join = { level = "allow", priority = 0 }
unnecessary_lazy_evaluations = { level = "warn", priority = 0 }
unnecessary_literal_unwrap = { level = "warn", priority = 0 }
unnecessary_map_on_constructor = { level = "warn", priority = 0 }
unnecessary_mut_passed = { level = "warn", priority = 0 }
unnecessary_operation = { level = "warn", priority = 0 }
unnecessary_owned_empty_strings = { level = "warn", priority = 0 }
unnecessary_safety_comment = { level = "allow", priority = 0 }
unnecessary_safety_doc = { level = "allow", priority = 0 }
unnecessary_self_imports = { level = "allow", priority = 0 }
unnecessary_sort_by = { level = "warn", priority = 0 }
unnecessary_struct_initialization = { level = "allow", priority = 0 }
unnecessary_to_owned = { level = "warn", priority = 0 }
unnecessary_unwrap = { level = "warn", priority = 0 }
unnecessary_wraps = { level = "allow", priority = 0 }
unneeded_field_pattern = { level = "allow", priority = 0 }
unneeded_wildcard_pattern = { level = "warn", priority = 0 }
unnested_or_patterns = { level = "allow", priority = 0 }
unreachable = { level = "allow", priority = 0 }
unreadable_literal = { level = "allow", priority = 0 }
unsafe_derive_deserialize = { level = "allow", priority = 0 }
unsafe_removed_from_name = { level = "warn", priority = 0 }
unseparated_literal_suffix = { level = "allow", priority = 0 }
unsound_collection_transmute = { level = "deny", priority = 0 }
unused_async = { level = "allow", priority = 0 }
unused_enumerate_index = { level = "warn", priority = 0 }
unused_format_specs = { level = "warn", priority = 0 }
unused_io_amount = { level = "deny", priority = 0 }
unused_peekable = { level = "allow", priority = 0 }
unused_rounding = { level = "allow", priority = 0 }
unused_self = { level = "allow", priority = 0 }
unused_unit = { level = "warn", priority = 0 }
unusual_byte_groupings = { level = "warn", priority = 0 }
unwrap_in_result = { level = "allow", priority = 0 }
unwrap_or_default = { level = "warn", priority = 0 }
unwrap_used = { level = "allow", priority = 0 }
upper_case_acronyms = { level = "warn", priority = 0 }
use_debug = { level = "allow", priority = 0 }
use_self = { level = "allow", priority = 0 }
used_underscore_binding = { level = "allow", priority = 0 }
useless_asref = { level = "warn", priority = 0 }
useless_attribute = { level = "deny", priority = 0 }
useless_conversion = { level = "warn", priority = 0 }
useless_format = { level = "warn", priority = 0 }
useless_let_if_seq = { level = "allow", priority = 0 }
useless_transmute = { level = "warn", priority = 0 }
useless_vec = { level = "warn", priority = 0 }
vec_box = { level = "warn", priority = 0 }
vec_init_then_push = { level = "warn", priority = 0 }
vec_resize_to_zero = { level = "deny", priority = 0 }
verbose_bit_mask = { level = "allow", priority = 0 }
verbose_file_reads = { level = "allow", priority = 0 }
vtable_address_comparisons = { level = "deny", priority = 0 }
waker_clone_wake = { level = "warn", priority = 0 }
while_immutable_condition = { level = "deny", priority = 0 }
while_let_loop = { level = "warn", priority = 0 }
while_let_on_iterator = { level = "warn", priority = 0 }
wildcard_dependencies = { level = "allow", priority = 0 }
wildcard_enum_match_arm = { level = "allow", priority = 0 }
wildcard_imports = { level = "allow", priority = 0 }
wildcard_in_or_patterns = { level = "warn", priority = 0 }
write_literal = { level = "warn", priority = 0 }
write_with_newline = { level = "warn", priority = 0 }
writeln_empty_string = { level = "warn", priority = 0 }
wrong_self_convention = { level = "warn", priority = 0 }
wrong_transmute = { level = "deny", priority = 0 }
zero_divided_by_zero = { level = "warn", priority = 0 }
zero_prefixed_literal = { level = "warn", priority = 0 }
zero_ptr = { level = "warn", priority = 0 }
zero_sized_map_values = { level = "allow", priority = 0 }
zst_offset = { level = "deny", priority = 0 }
